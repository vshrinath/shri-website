---
import type { CollectionEntry } from "astro:content";

type LibraryEntry = CollectionEntry<"library">;

interface Props {
  entries: LibraryEntry[];
}

const { entries } = Astro.props as Props;
const formatDate = (date: Date) =>
  new Intl.DateTimeFormat(undefined, {
    year: "numeric",
    month: "short",
    day: "numeric",
  }).format(date);
---

<ol class="relative mt-10 border-s">
  {entries.map((entry) => {
    const { data } = entry;
    const link = data.link ?? "#";

    return (
      <li class="ms-6 pb-10" key={entry.id}>
        <span class="absolute -start-1.5 mt-1.5 h-3 w-3 rounded-full bg-gray-400"></span>

        <div class="flex flex-wrap items-center gap-2 text-xs text-gray-500">
          <time>{formatDate(data.date)}</time>
          <span>•</span>
          <span class="rounded-full border px-2 py-0.5">{data.type}</span>
          {data.source && <><span>•</span><span>{data.source}</span></>}
          {data.highlight && (
            <span class="ml-2 text-amber-600 font-medium">★ Highlight</span>
          )}
        </div>

        <a
          href={link}
          target={link.startsWith("http") ? "_blank" : undefined}
          rel={link.startsWith("http") ? "noopener" : undefined}
          class="mt-2 block text-lg font-medium hover:underline"
        >
          {data.title}
        </a>

        {data.excerpt && (
          <p class="mt-2 text-sm text-gray-600">
            {data.excerpt}
          </p>
        )}
      </li>
    );
  })}
</ol>
